"""
This file contains the unit tests for adfgvx.
"""

def test_adfgvx1():
    from adfgvx.run_adfgvx import solve_adfgvx
    from unittest.mock import patch
    from adfgvx.morse import encode
    import os
    """
    Test ADFGVX using small example.
    :return:
    """
    # I think it's obvious where I got this text from :)
    plaintext = "IamanartificialintelligencebasedconversationalassistantcreatedtoengageinmeaningfulinsightfulandresponsivedialogueswithusersbyinterpretingnaturallanguageinputandprovidingcleardetailedandcontextuallyappropriateresponsesacrossavastarrayofsubjectsfunctioningasatooldesignedtofacilitatelearningproblemsolvingcreativethinkingandtaskcompletionbyleveragingadvancedlanguageprocessingcapabilitiesIstrivetoemulatehumanconversationwhileofferingtheprecisionconsistencyandadaptabilityofamachineBuiltonafoundationofcomputationalalgorithmsandexpandeddatasetsmypurposeistoinformassistandinspirethroughtextbasedcommunicationWhetheraddressingcomplextechnicalqueriesbrainstormingideasofferingguidanceorsimplyengagingincasualconversationIamheretocontributevaluefosterunderstandingandbridgethegaptweenhumancuriosityandthewealthofinformationavailableinthedigitalrealmThroughcontinuousinteractionIaimtorefinemyresponsestolearnfromuserneedsandadaptdynamicallytodeliveranincreasinglyeffectiveandenjoyableuserexperienceemphasizingclarityreliabilitycreativityandacommittmenttoassistingusersintheirownpursuits"
    plaintext = plaintext.lower()
    # Keyword: F4V0W8T6A1L9EY2BC3KJ5PQMX7INZHRODGSU random polybius square
    # Use polybius square on https://www.dcode.fr/adfgvx with a key of length 1
    cipher_before_transposition
    key = (3, 4, 2, 5, 0, 6, 1)
    # https://www.dcode.fr/adfgvx
    cipher
    # Write morse to file
    with open("test_adfgvx.txt", "w") as f:
        f.write(encode(cipher))
        f.close()
    # Run solve_adfgvx with the following inputs when asked to give an input.
    inp = ["t i", "o n", "h r", "g f", "d c", "h l", "d g", "o s", "h d", "p v", "w p", "k x", "Exit"]
    with patch('builtins.input', side_effect=inp):
        result = solve_adfgvx("test_adfgvx.txt", 10)
    # remove file
    os.remove("test_adfgvx.txt")
    # Check result
    assert result == plaintext
import unittest
import sys

from playfair.src.scoring_algorithms import score_weighted_average, score_trigrams_count, score_three_letter_patterns, score_frequencies_english, score_four_gram_statistics
from playfair.src.playfair import Playfair


class TestScoringAlgorithms(unittest.TestCase):
    # Value used in n-gram statistic heuristic
    value_happy_days = -29.364781718810498

    def test_score_weighted_average_EN(self):
        """
        Take english text and expect english as highest score
        :return:
        """
        text = "THISISENGLISHTEXTANDMYNAMEISNOTIMPORTANTASTHISWOULDNOTBERECOGNISEDASENGLISH"
        keyword = "keyword"
        playfair_obj = Playfair(keyword)
        encrypted_text = playfair_obj.encrypt(text)

        language, score = score_weighted_average(encrypted_text, playfair_obj)
        self.assertEqual("EN", language, "The language should be English, but it is not")

    def test_score_weighted_average_SP(self):
        """
        Take Spanish text and expect english as highest score
        :return:
        """
        text = "ESTOESUNTEXTOENINGLESYMINOMBRENOESIMPORTANTEPUESNOSERECONOCERIACOMOINGLES"
        keyword = "keyword"
        playfair_obj = Playfair(keyword)
        encrypted_text = playfair_obj.encrypt(text)

        language, score = score_weighted_average(encrypted_text, playfair_obj)
        self.assertEqual("SP", language, "The language should be Spanish, but it is not")

    def test_score_weighted_average_FR(self):
        """
        Take French text and expect english as highest score
        :return:
        """
        text = "CECIESTUNTEXTEANGLAISETMONNOMNESTPASIMPORTANTCARCELANESERAITPASRECONNOCOMMEANGLAIS"
        keyword = "keyword"
        playfair_obj = Playfair(keyword)
        encrypted_text = playfair_obj.encrypt(text)

        language, score = score_weighted_average(encrypted_text, playfair_obj)
        self.assertEqual("FR", language, "The language should be French, but it is not")

    def test_score_trigram_count(self):
        """
        Give score to text by counting each trigram in the text
        """
        text = 'BCRBCRDGGHILDGHRCR'
        cipher_obj = Playfair("keyword")
        score = score_trigrams_count(text, cipher_obj)
        self.assertEqual(0.50, score[1])

    def test_integrity_score_count_three_letter_NL(self):
        """
        Test the integrity of the scoring algorithm by testing it on a known text
        """
        text = "DOEMAARGEWOONALSOFIKERNIETBENZEIIKTEGENHETKINDDATVANDEHONGERAANHETSTERVENWASENDATIKPROBEERDETEFOTOGRAFERENIKWASZENUWACHTIGENWOUDATIKEENPILTESLIKKENHADDIEHETBEVENVANMIJNHANDENZOUSTOPPENERGENSVOELDEIKDATDITMIJNFOTOZOUWORDENDEFOTODIEFOTODIEMIJNGROTEDOORBRAAKZOUINLUIDENWAARDOORIKMIJNMARKTWAARDEKONOPDRIJVENDIEHETMIJZOUTOESTAANDEGROTEBAASVANREUTERSTEVRAGENOFHIJMIJEENSTERUGKONBELLENWANNEERHETMIJBETERPASTEEENFOTOGRAAFVOELTZOIETSDEWERELDBEROEMDEHENRICARTIERBRESSONVOELDEHETTOENHIJDATJONGETJEMETDETWEEWIJNFLESSENINDEPARIJSERUEMOUFFETARDVASTLEGDEELLIOTERWITTVOELDEHETTOENDIENEGERVOORHETOOGVANDECAMERAZIJNTONGUITSTAKALFREDSTIEGLITZVOELDEHETTOENDATMOOIEMEISJEMETDENOGMOOIEREVINGERSHAARJASHADDICHTGEKNOOPTOPHETJUISTEMOMENTENEDWARDSTEICHENHADHONDERDENKIEKJESVANGRETAGARBOGESCHOTENMAARHADNOGTIJDENSHETSCHERPSTELLENVANZIJNLENSGEVOELDDITWORDTHETENIGEWARESCHONEULTIEMEPORTRETVANDEGODINHETZELFDEALSWATIKVOELDEMETHETUITGEHONGERDEKINDINMIJNVIZIERZALIGOPAVONDENDIENERGENSVOORDEUGENDANVOORFLAUWEKULHOORJEWELEENSBEWERENDATFOTOGRAFIEVEELZONIETALLESMETGELUKVANDOENHEEFTENDANBEGINNENZEOVERDEMAKERVANDEFOTODIEIEDEREENKENTHETNAAKTEMEISJEVERBRANDRENNENDMETDEARMENOPENCHRISTUSMETEENKUTALSDEFOTOGRAAFNIETTOEVALLIGOPDEPLAATSVANHETNAPALMBOMBARDEMENTWASGEWEESTZOREDENERENZEDANHADHIJNOOITDIEFOTOKUNNENSCHIETENENDUSHEEFTHETTEMAKENMETGELUKTJAUGAATTOCHNIETMOPPERENDATIKHETGELUKHADDATERVOORMIJNOGENEENKINDLAGTECREPERENIKHADDATGELUKNIETIKHADDATTALENTZOALSROBERTCAPAHETTALENTHADDENEUSHADMETZIJNCAMERAOPDEPLAATSTEZIJNWAAREENSOLDAATDEHERSENENUITDEKOPWERDENGESCHOTENGELUKZEGGENBERGBEKLIMMERSDIEEENMOORDENDESTEENLAWINEOPDRIECENTIMETERVANHUNSMIKKELZAGENVOORBIJRAZENGELUKISOPDENDUUREENKWESTIEVANBEKWAAMHEIDIKWEETDATZEDAARGELIJKINHEBBEN"
        score = score_three_letter_patterns(text, Playfair("keyword"), False)
        self.assertGreaterEqual(score[1], 0.60)    # Result = 0.6420118343195266

    def test_integrity_score_count_three_letter_EN(self):
        """
        Test the integrity of the scoring algorithm by testing it on an English text
        """
        text = "THEPROCESSOFKNOWLEDGEACQUISITIONINVOLVESLEARNINGUNDERSTANDINGANDAPPLICATIONASTHEFOUNDATIONOFHUMANDEVELOPMENTANDPROGRESSWITHOUTTHETHIRSTFORKNOWLEDGEANDTHEUNWAVERINGCURIOSITYTHATDRIVESUSFORWARDMUCHOFWHATWEHAVEACHIEVEDINSCIENCETECHNOLOGYARTANDCULTUREWOULDNEVERHAVEBEENPOSSIBLETHESTRUGGLETOUNDERSTANDTHEWORLDAROUNDUSBEGANWITHANCIENTCIVILIZATIONSANDCONTINUESTHROUGHTOMODERNERAWHEREEXPLORATIONANDINNOVATIONAREINCREASINGLYESSENTIALTOPUSHINGTHEBOUNDARIESOFWHATWETHOUGHTPOSSIBLEFROMTHETHEORIESOFPHYSICSTOTHEWONDERSOFBIOLOGYANDTHEDEPTHSOFSPACEWEFINDOURSELVESREPEATEDLYDISCOVERINGNEWIDEASANDCREATINGNEWTOOLSTHATPUSHUSFURTHERANDINSPIRINGTHEGENERATIONSTOFOLLOWTOSEEKOUTNEWDISCOVERIESEDUCATIONWHETHERFORMALORINFORMALISASTEPINTHEDIRECTIONOFBETTERUNDERSTANDINGTHECOMPLEXITIESOFTHEREALMANDISANUNENDINGJOURNEYTHATREQUIRESDEDICATIONANDPERSISTENCEEVERYINDIVIDUALWITHINTHECOMMUNITYOFSCHOLARSSTUDENTSANDRESEARCHERSSHARESACOMMONGOALTOMAKETHEWORLDABETTERPLACETOTHROUGHKNOWLEDGEANDUNDERSTANDINGANDTOAPPLYTHEIRSKILLSFORTHEIMPROVEMENTOFHUMANITYFORKNOWLEDGEISNOTONLYAPOWERFULTOOLFORACHIEVINGPERSONALGROWTHBUTALSOAVITALINGREDIENTINBUILDINGTHEFOUNDATIONOFASUSTAINABLEFUTURE"
        score = score_three_letter_patterns(text, Playfair("keyword"), False)
        self.assertGreaterEqual(score[1], 0.55)    # Result = 0.5775635407537248

    def test_integrity_score_count_three_letter_SP(self):
        """
        Test the integrity of the scoring algorithm by testing it on a Spanish text
        """
        text = "ELPROCESODEADQUISICIONDECONOCIMIENTOINVOLUCRAAPRENDIZAJEENTENDIMIENTOYAPLICACIONCOMOFUNDAMENTODELDESARROLLOYPROGRESODELAHUMANIDADSINLASEDEVORAZDEPORCONOCIMIENTOYLABUSQUETAINCESANTEDELAEXPLORACIONDELAMISMANADANOSHAHECHOCAPACESDELOGRARGRANDESAVANCESENCIENCIATECNOLOGIAARTETRASCULTURASDIVERSASQUESEHANENRIQUECIDOMUTUAMENTEALREDEDORDELMUNDODESDELOSMISTERIOSDELAFISICAELASOMBRODELABIOLOGIAHASTALAINMENSIDUMBREDELESPACIOENCONTRAMOSQUECADADECUBRIMIENTOINVITAAUNNUEVOVIAJEUNNUEVOCOMPRENDERELPAPELQUECADAINDIVIDUODESEMPEÃ‘
        score = score_three_letter_patterns(text, Playfair("keyword"), False)
        self.assertGreaterEqual(score[1], 0.60)    # Result = 0.6171586715867159

    def test_scoring_english_frequencies(self):
        """
        Test the integrity of the scoring algorithm by testing it on an English text
        """
        text = "THEPROCESSOFKNOWLEDGEACQUISITIONINVOLVESLEARNINGUNDERSTANDINGANDAPPLICATIONASTHEFOUNDATIONOFHUMANDEVELOPMENTANDPROGRESSWITHOUTTHETHIRSTFORKNOWLEDGEANDTHEUNWAVERINGCURIOSITYTHATDRIVESUSFORWARDMUCHOFWHATWEHAVEACHIEVEDINSCIENCETECHNOLOGYARTANDCULTUREWOULDNEVERHAVEBEENPOSSIBLETHESTRUGGLETOUNDERSTANDTHEWORLDAROUNDUSBEGANWITHANCIENTCIVILIZATIONSANDCONTINUESTHROUGHTOMODERNERAWHEREEXPLORATIONANDINNOVATIONAREINCREASINGLYESSENTIALTOPUSHINGTHEBOUNDARIESOFWHATWETHOUGHTPOSSIBLEFROMTHETHEORIESOFPHYSICSTOTHEWONDERSOFBIOLOGYANDTHEDEPTHSOFSPACEWEFINDOURSELVESREPEATEDLYDISCOVERINGNEWIDEASANDCREATINGNEWTOOLSTHATPUSHUSFURTHERANDINSPIRINGTHEGENERATIONSTOFOLLOWTOSEEKOUTNEWDISCOVERIESEDUCATIONWHETHERFORMALORINFORMALISASTEPINTHEDIRECTIONOFBETTERUNDERSTANDINGTHECOMPLEXITIESOFTHEREALMANDISANUNENDINGJOURNEYTHATREQUIRESDEDICATIONANDPERSISTENCEEVERYINDIVIDUALWITHINTHECOMMUNITYOFSCHOLARSSTUDENTSANDRESEARCHERSSHARESACOMMONGOALTOMAKETHEWORLDABETTERPLACETOTHROUGHKNOWLEDGEANDUNDERSTANDINGANDTOAPPLYTHEIRSKILLSFORTHEIMPROVEMENTOFHUMANITYFORKNOWLEDGEISNOTONLYAPOWERFULTOOLFORACHIEVINGPERSONALGROWTHBUTALSOAVITALINGREDIENTINBUILDINGTHEFOUNDATIONOFASUSTAINABLEFUTURE"
        score = score_frequencies_english(text, Playfair("keyword"), False)
        self.assertGreaterEqual(score[1], 0.95)

    def test_scoring_fourGrams(self):
        """
        Test the scoring algorithm n-gram statistics on text with known result
        """
        text = "HAPPYDAYS"
        language, prob_log = score_four_gram_statistics(text, Playfair("keyword"), False)
        self.assertEqual(prob_log, self.value_happy_days)

    def test_scoring_fourGrams_big(self):
        """
        Test the scoring algorithm n-gram statistics on text with bigger text

        AFTER RUNNING: took 47 seconds to run
        """
        text = "THEPROCESSOFKNOWLEDGEACQUISITIONINVOLVESLEARNINGUNDERSTANDINGANDAPPLICATIONASTHEFOUNDATIONOFHUMANDEVELOPMENTANDPROGRESSWITHOUTTHETHIRSTFORKNOWLEDGEANDTHEUNWAVERINGCURIOSITYTHATDRIVESUSFORWARDMUCHOFWHATWEHAVEACHIEVEDINSCIENCETECHNOLOGYARTANDCULTUREWOULDNEVERHAVEBEENPOSSIBLETHESTRUGGLETOUNDERSTANDTHEWORLDAROUNDUSBEGANWITHANCIENTCIVILIZATIONSANDCONTINUESTHROUGHTOMODERNERAWHEREEXPLORATIONANDINNOVATIONAREINCREASINGLYESSENTIALTOPUSHINGTHEBOUNDARIESOFWHATWETHOUGHTPOSSIBLEFROMTHETHEORIESOFPHYSICSTOTHEWONDERSOFBIOLOGYANDTHEDEPTHSOFSPACEWEFINDOURSELVESREPEATEDLYDISCOVERINGNEWIDEASANDCREATINGNEWTOOLSTHATPUSHUSFURTHERANDINSPIRINGTHEGENERATIONSTOFOLLOWTOSEEKOUTNEWDISCOVERIESEDUCATIONWHETHERFORMALORINFORMALISASTEPINTHEDIRECTIONOFBETTERUNDERSTANDINGTHECOMPLEXITIESOFTHEREALMANDISANUNENDINGJOURNEYTHATREQUIRESDEDICATIONANDPERSISTENCEEVERYINDIVIDUALWITHINTHECOMMUNITYOFSCHOLARSSTUDENTSANDRESEARCHERSSHARESACOMMONGOALTOMAKETHEWORLDABETTERPLACETOTHROUGHKNOWLEDGEANDUNDERSTANDINGANDTOAPPLYTHEIRSKILLSFORTHEIMPROVEMENTOFHUMANITYFORKNOWLEDGEISNOTONLYAPOWERFULTOOLFORACHIEVINGPERSONALGROWTHBUTALSOAVITALINGREDIENTINBUILDINGTHEFOUNDATIONOFASUSTAINABLEFUTURE"
        language, prob_log = score_four_gram_statistics(text, Playfair("keyword"), False)
        self.assertLess(prob_log, self.value_happy_days)


if __name__ == '__main__':
    unittest.main()
